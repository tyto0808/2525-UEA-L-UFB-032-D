using System;

namespace ArbolBinarioEjemplo
{
    class Nodo
    {
        public int dato;
        public Nodo izquierda;
        public Nodo derecha;

        public Nodo(int valor)
        {
            dato = valor;
            izquierda = null;
            derecha = null;
        }
    }

    class ArbolBinario
    {
        public Nodo raiz;

        public void Insertar(int valor)
        {
            raiz = InsertarRecursivo(raiz, valor);
        }

        private Nodo InsertarRecursivo(Nodo nodo, int valor)
        {
            if (nodo == null)
                return new Nodo(valor);

            if (valor < nodo.dato)
                nodo.izquierda = InsertarRecursivo(nodo.izquierda, valor);
            else if (valor > nodo.dato)
                nodo.derecha = InsertarRecursivo(nodo.derecha, valor);

            return nodo;
        }

        public void Inorden(Nodo nodo)
        {
            if (nodo != null)
            {
                Inorden(nodo.izquierda);
                Console.Write(nodo.dato + " ");
                Inorden(nodo.derecha);
            }
        }

        public void Preorden(Nodo nodo)
        {
            if (nodo != null)
            {
                Console.Write(nodo.dato + " ");
                Preorden(nodo.izquierda);
                Preorden(nodo.derecha);
            }
        }

        public void Postorden(Nodo nodo)
        {
            if (nodo != null)
            {
                Postorden(nodo.izquierda);
                Postorden(nodo.derecha);
                Console.Write(nodo.dato + " ");
            }
        }

        public bool Buscar(int valor)
        {
            return BuscarRecursivo(raiz, valor);
        }

        private bool BuscarRecursivo(Nodo nodo, int valor)
        {
            if (nodo == null)
                return false;

            if (valor == nodo.dato)
                return true;
            else if (valor < nodo.dato)
                return BuscarRecursivo(nodo.izquierda, valor);
            else
                return BuscarRecursivo(nodo.derecha, valor);
        }

        public Nodo Eliminar(Nodo nodo, int valor)
        {
            if (nodo == null)
                return nodo;

            if (valor < nodo.dato)
                nodo.izquierda = Eliminar(nodo.izquierda, valor);
            else if (valor > nodo.dato)
                nodo.derecha = Eliminar(nodo.derecha, valor);
            else
            {
                if (nodo.izquierda == null)
                    return nodo.derecha;
                else if (nodo.derecha == null)
                    return nodo.izquierda;

                nodo.dato = MinValor(nodo.derecha);
                nodo.derecha = Eliminar(nodo.derecha, nodo.dato);
            }

            return nodo;
        }

        private int MinValor(Nodo nodo)
        {
            int minv = nodo.dato;
            while (nodo.izquierda != null)
            {
                minv = nodo.izquierda.dato;
                nodo = nodo.izquierda;
            }
            return minv;
        }
    }

    class Program
    {
        static void Main()
        {
            ArbolBinario arbol = new ArbolBinario();
            int opcion;

            do
            {
                Console.WriteLine("\n--- MENÚ ÁRBOL BINARIO ---");
                Console.WriteLine("1. Insertar nodo");
                Console.WriteLine("2. Recorrido Inorden");
                Console.WriteLine("3. Recorrido Preorden");
                Console.WriteLine("4. Recorrido Postorden");
                Console.WriteLine("5. Buscar elemento");
                Console.WriteLine("6. Eliminar nodo");
                Console.WriteLine("0. Salir");
                Console.Write("Seleccione una opción: ");
                opcion = int.Parse(Console.ReadLine());

                switch (opcion)
                {
                    case 1:
                        Console.Write("Ingrese valor a insertar: ");
                        int valor = int.Parse(Console.ReadLine());
                        arbol.Insertar(valor);
                        break;
                    case 2:
                        Console.WriteLine("Recorrido Inorden:");
                        arbol.Inorden(arbol.raiz);
                        Console.WriteLine();
                        break;
                    case 3:
                        Console.WriteLine("Recorrido Preorden:");
                        arbol.Preorden(arbol.raiz);
                        Console.WriteLine();
                        break;
                    case 4:
                        Console.WriteLine("Recorrido Postorden:");
                        arbol.Postorden(arbol.raiz);
                        Console.WriteLine();
                        break;
                    case 5:
                        Console.Write("Ingrese valor a buscar: ");
                        int buscar = int.Parse(Console.ReadLine());
                        Console.WriteLine(arbol.Buscar(buscar) ? "Elemento encontrado." : "Elemento no encontrado.");
                        break;
                    case 6:
                        Console.Write("Ingrese valor a eliminar: ");
                        int eliminar = int.Parse(Console.ReadLine());
                        arbol.raiz = arbol.Eliminar(arbol.raiz, eliminar);
                        Console.WriteLine("Nodo eliminado si existía.");
                        break;
                    case 0:
                        Console.WriteLine("Saliendo...");
                        break;
                    default:
                        Console.WriteLine("Opción inválida.");
                        break;
                }

            } while (opcion != 0);
        }
    }
}
